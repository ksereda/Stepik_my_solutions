package module_2_4.task_1;

/*
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥, –≤—ã—á–∏—Å–ª—è—é—â–∏–π —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.

–§–∞–∫—Ç–æ—Ä–∏–∞–ª ùëÅ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ 1‚ãÖ2‚ãÖ...‚ãÖùëÅ.

–ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–æ –¥–∞–∂–µ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö ùëÅ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ int –∏ long –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –ü–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BigInteger.
*/

import java.math.BigInteger;
import java.util.stream.IntStream;

public class Main {

    // Solution 1
    public static BigInteger factorial(int value) {

        BigInteger resultNumber = BigInteger.ONE;

        for (int i = 1; i <= value; i++) {
            resultNumber = resultNumber.multiply(BigInteger.valueOf(i));
        }
        return resultNumber;

    }

    // Solution 2
    public static BigInteger factorial2(int n) {

       return IntStream.rangeClosed(1, n).mapToObj(i -> BigInteger.valueOf(i)).reduce(BigInteger.ONE, BigInteger::multiply);

    }

}
